<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://mangodm.github.io/</id><title>Tiny Changes</title><subtitle>A learning journey on almost everything.</subtitle> <updated>2022-11-21T13:38:40+00:00</updated> <author> <name>mangodm</name> <uri>https://mangodm.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://mangodm.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://mangodm.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 mangodm </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>(EN) Clean Code | Naming things</title><link href="https://mangodm.github.io/posts/naming-things/" rel="alternate" type="text/html" title="(EN) Clean Code | Naming things" /><published>2022-11-21T03:33:00+00:00</published> <updated>2022-11-21T03:33:00+00:00</updated> <id>https://mangodm.github.io/posts/naming-things/</id> <content src="https://mangodm.github.io/posts/naming-things/" /> <author> <name>mangodm</name> </author> <category term="CS" /> <category term="clean-code" /> <summary> These are notes from the Clean Code course by Udemy. 01. Naming: Assigning good names Why good names matter Names should be meaningful because: It allows readers to understand the code without going through it in detail. const user = new User(); database.insert(user); if (isLoggedIn) {...} Choosing good names variables, constants ... </summary> </entry> <entry><title>(EN) DataCamp | Foundations for efficiencies</title><link href="https://mangodm.github.io/posts/foundations-for-efficiencies/" rel="alternate" type="text/html" title="(EN) DataCamp | Foundations for efficiencies" /><published>2022-08-08T03:33:00+00:00</published> <updated>2022-08-08T03:33:00+00:00</updated> <id>https://mangodm.github.io/posts/foundations-for-efficiencies/</id> <content src="https://mangodm.github.io/posts/foundations-for-efficiencies/" /> <author> <name>mangodm</name> </author> <category term="Programming" /> <category term="python" /> <summary> These are notes from the Writing Efficient Python Code course by DataCamp. 1. What is efficient In general, efficient Python code is the one: executing quickly for the task at hand minimizing the memory footprint following Python’s coding style principles (i.e. PEP) 2. Building with built-ins Python built-in components Built-in components are referred as the Python Standard Libra... </summary> </entry> <entry><title>(KR) 함수형코딩 | 17-타임라인 조율하기</title><link href="https://mangodm.github.io/posts/coordinating-timelines/" rel="alternate" type="text/html" title="(KR) 함수형코딩 | 17-타임라인 조율하기" /><published>2022-08-04T03:33:00+00:00</published> <updated>2022-08-04T03:33:00+00:00</updated> <id>https://mangodm.github.io/posts/coordinating-timelines/</id> <content src="https://mangodm.github.io/posts/coordinating-timelines/" /> <author> <name>mangodm</name> </author> <category term="CS" /> <category term="functional-programming" /> <summary> 에릭 노먼드의 쏙쏙 들어오는 함수형 코딩 17장을 읽고, 정리한 페이지 동시성 기본형을 활용하여 타임라인을 관리하는 재사용 가능 객체를 만들 수 있음. Cut() 함수 타임라인을 분리하여 액션이 섞이지 않고, 순서가 보장되도록 하는 기법 실행 가능한 순서가 중요하지 않은 콜백들은 병렬로 처리 후, 컷을 적용하면 실행 속도를 개선할 수 있음. function Cut(num, callback) { // num: 기다릴 타임라인의 수, callback: 모든 것이 끝났을 때 실행할 콜백 var num_finished = 0; // 카운터 초기화 return function() { // 타임라인이 끝났을 때 호출 num_finished += 1; // ... </summary> </entry> <entry><title>(KR) 함수형코딩 | 15-타임라인 격리하기</title><link href="https://mangodm.github.io/posts/isolating-timelines/" rel="alternate" type="text/html" title="(KR) 함수형코딩 | 15-타임라인 격리하기" /><published>2022-08-02T03:33:00+00:00</published> <updated>2022-08-02T03:33:00+00:00</updated> <id>https://mangodm.github.io/posts/isolating-timelines/</id> <content src="https://mangodm.github.io/posts/isolating-timelines/" /> <author> <name>mangodm</name> </author> <category term="CS" /> <category term="functional-programming" /> <summary> 에릭 노먼드의 쏙쏙 들어오는 함수형 코딩 15장을 읽고, 정리한 페이지 15. 타임라인 격리하기 타임라인 다이어그램(timeline diagram)은 시간에 따른 코드의 액션 순서를 시각적으로 표시한 것 소프트웨어의 동작을 이해하고, 버그를 진단하고, 예측하는데 도움을 줌. 타임라인 다이어그램 그리기 액션을 확인하기: 숨어있는 액션까지 잘 찾아서 모든 액션을 타임라인에 표시해야 함. 짧고 쉽게 쓰기를 하게 해주는 연산자(++, +=)는 하나의 액션처럼 생겼으나, 실제로는 복합적인 액션 // 세 단계로 이루어진 total ++; var temp = total; // 읽기(액션) temp = temp + 1; // ... </summary> </entry> <entry><title>(KR) 함수형코딩 | 14-중첩된 데이터에 함수형 도구 사용</title><link href="https://mangodm.github.io/posts/functional-tools-for-nested-data/" rel="alternate" type="text/html" title="(KR) 함수형코딩 | 14-중첩된 데이터에 함수형 도구 사용" /><published>2022-08-01T03:33:00+00:00</published> <updated>2022-08-01T03:33:00+00:00</updated> <id>https://mangodm.github.io/posts/functional-tools-for-nested-data/</id> <content src="https://mangodm.github.io/posts/functional-tools-for-nested-data/" /> <author> <name>mangodm</name> </author> <category term="CS" /> <category term="functional-programming" /> <summary> 에릭 노먼드의 쏙쏙 들어오는 함수형 코딩 14장을 읽고, 정리한 페이지 14. 중첩된 데이터에 함수형 도구 사용하기 update() 해시 맵을 다루기 위한 함수형 도구로, 객체에 있는 값을 바꿀 수 있도록 해줌. 키로 대상 객체의 값을 조회, 입력 받은 함수로 값을 변경하여 리턴 function update(object, key, modify) { // 객체, 바꿀 값의 위치(키), 바꾸는 동작을 인자로 받음. var value = object[key]; // 조회 var newValue = modify(value); // 바꾸기 var newObject = objectSet(object, key, newValue... </summary> </entry> </feed>
